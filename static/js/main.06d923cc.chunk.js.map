{"version":3,"sources":["components/catpics.js","components/header.js","components/body.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["cats","id","src","clicked","Header","props","score","topScore","prompt","Body","alt","onClick","update","Game","state","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","setState","incrementScore","reset","map","kitty","this","className","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAgDeA,EAhDJ,CACT,CACEC,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,GAEX,CACEF,GAAI,EACJC,IAAK,oBACLC,SAAS,IC/BEC,MAXf,SAAiBC,GACf,OACE,6BACE,gDACA,wCAAcA,EAAMC,MAApB,iBAAyCD,EAAME,SAA/C,KACA,iCAAOF,EAAMG,OAAb,OCGSC,MARf,SAAeJ,GACb,OACE,6BACE,yBAAKH,IAAKG,EAAMH,IAAKQ,IAAI,YAAYC,QAAS,kBAAMN,EAAMO,OAAOP,EAAMJ,SCgG9DY,E,2MA/FbC,MAAQ,CACNR,MAAO,EACPC,SAAU,EACVC,OAAQ,2B,EAGVO,QAAU,SAACC,GAET,IADA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAClB,IAAMD,GACXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEzCF,EAAiBD,EADjBG,GAAe,GAEfH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,G,EASTT,SAAW,WACN,EAAKO,MAAMR,OAAS,EAAKQ,MAAMP,UAChC,EAAKiB,SAAS,CACZjB,SAAU,EAAKO,MAAMR,MAAO,K,EAKlCmB,eAAiB,WACU,IAArB,EAAKX,MAAMR,MACf,EAAKkB,SAAS,CACZlB,MAAO,EAAKQ,MAAMR,MAAO,EACzBE,OAAQ,aAGV,EAAKgB,SAAS,CACZlB,MAAO,EAAKQ,MAAMR,MAAO,EACzBE,OAAQ,gBAGV,EAAKD,Y,EAGPmB,MAAQ,WACN,EAAKF,SAAS,CACZhB,OAAQ,aACRF,MAAO,IAETN,EAAK2B,KAAI,SAACC,GAER,OADAA,EAAMzB,SAAU,EACTH,M,EAIXY,OAAS,SAACX,GACRD,EAAK2B,KAAI,SAACC,GAOR,OANI3B,IAAO2B,EAAM3B,KAAwB,IAAlB2B,EAAMzB,SAC3B,EAAKsB,iBACLG,EAAMzB,SAAU,GACPF,IAAO2B,EAAM3B,KAAwB,IAAlB2B,EAAMzB,SAClC,EAAKuB,QAEA1B,KAET,EAAKe,QAAQf,I,mFAjDb6B,KAAKL,SAAS,CACZxB,KAAM6B,KAAKd,QAAQf,O,+BAmDZ,IAAD,OACR,OACE,yBAAK8B,UAAU,OACb,kBAAC,EAAD,CACExB,MAASuB,KAAKf,MAAMR,MACpBC,SAAYsB,KAAKf,MAAMP,SACvBC,OAAUqB,KAAKf,MAAMN,SAEvB,oGACA,6BACGR,EAAK2B,KAAI,SAAAC,GAAK,OACb,kBAAC,EAAD,CACE3B,GAAI2B,EAAM3B,GACV8B,IAAKH,EAAM3B,GACXC,IAAK0B,EAAM1B,IACXU,OAAQ,EAAKA,kB,GAvFRoB,IAAMC,WCKVC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.06d923cc.chunk.js","sourcesContent":["let cats = [\r\n  {\r\n    id: 1,\r\n    src: './images/cat1.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 2,\r\n    src: './images/cat2.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 3,\r\n    src: './images/cat3.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 4,\r\n    src: './images/cat4.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 5,\r\n    src: './images/cat5.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 6,\r\n    src: './images/cat6.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 7,\r\n    src: './images/cat7.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 8,\r\n    src: './images/cat8.jpg',\r\n    clicked: false\r\n  },\r\n  {\r\n    id: 9,\r\n    src: './images/cat9.jpg',\r\n    clicked: false\r\n  },\r\n]\r\n\r\nexport default cats","import React from 'react'\r\n\r\nfunction Header (props) {\r\n  return (\r\n    <div>\r\n      <div> CLICKY KITTY! </div>\r\n      <div> Score: {props.score} | Top Score: {props.topScore} </div>\r\n      <div> {props.prompt} </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Header","import React from 'react'\r\n\r\nfunction Body (props) {\r\n  return (\r\n    <div>\r\n      <img src={props.src} alt=\"kitty kat\" onClick={() => props.update(props.id)}/> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Body","import React from 'react'\r\nimport cats from './catpics'\r\nimport Header from './header'\r\nimport Body from './body'\r\n\r\nclass Game extends React.Component {\r\n  state = {\r\n    score: 0,\r\n    topScore: 0,\r\n    prompt: 'Click a kitty to begin!'\r\n  }\r\n\r\n  shuffle = (array) => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex)\r\n      currentIndex -=1\r\n      temporaryValue = array[currentIndex]\r\n      array[currentIndex] = array[randomIndex]\r\n      array[randomIndex] = temporaryValue\r\n    }\r\n    return array\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      cats: this.shuffle(cats)\r\n    })\r\n  }\r\n\r\n  topScore = () => {\r\n    if(this.state.score >= this.state.topScore) {\r\n      this.setState({\r\n        topScore: this.state.score +1\r\n      })\r\n    }\r\n  }\r\n\r\n  incrementScore = () => {\r\n    if (this.state.score === 8) {\r\n    this.setState({\r\n      score: this.state.score +1, \r\n      prompt: \"You Win!\"\r\n    })\r\n    } else {\r\n    this.setState({\r\n      score: this.state.score +1, \r\n      prompt: \"Good Kitty!\"\r\n    })\r\n    }\r\n    this.topScore()\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      prompt: \"Bad Kitty!\",\r\n      score: 0,\r\n    })\r\n    cats.map((kitty) => {\r\n      kitty.clicked = false\r\n      return cats\r\n    })\r\n  }\r\n\r\n  update = (id) => {\r\n    cats.map((kitty) => {\r\n      if (id === kitty.id && kitty.clicked === false) {\r\n        this.incrementScore()\r\n        kitty.clicked = true\r\n      } else if (id === kitty.id && kitty.clicked === true) {\r\n        this.reset()\r\n      } \r\n      return cats\r\n      })\r\n    this.shuffle(cats)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header \r\n          score = {this.state.score}\r\n          topScore = {this.state.topScore}\r\n          prompt = {this.state.prompt}\r\n        />\r\n        <p> Click on a kitty, but don't click on the same kitty more than once! </p>\r\n        <div>\r\n          {cats.map(kitty => (\r\n            <Body\r\n              id={kitty.id}\r\n              key={kitty.id}\r\n              src={kitty.src}\r\n              update={this.update}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}